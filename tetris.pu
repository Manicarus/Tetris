@startuml

/'skinparam linetype ortho'/
/'left to right direction'/
/'top to bottom direction'/
/'skinparam linetype polyline'/

/'
자식 객체와의 효과적인 상호작용을 위한 Design Pattern
Tetris와 Tetriomino, Playfield 사이에
Component라는 Abstraction Layer가 있을 필요가 있을까?
'/

/'
Playfield는 Tetriomino와 상호작용해서 Tetromino를 Stack에 Fix할 것이다.
이 때는 Tetromino 객체를 인자로 전달해야하는가?
'/

Game <|-- Tetris

Tetris --> TetrisComponent

TetrisComponent <|--> Tetromino
TetrisComponent <|--> Tetrion

TetrisComponent *-- Buffer
Coordinate -* TetrisComponent
TetrisComponent *- Dimension

/'왼쪽에 쓴 객체가 위(왼쪽)에 위치하고,
오른쪽에 쓴 객체가 아래(오른쪽)에 위치한다.'/

/'hyphen 한 개는 수평선을 긋고,
hyphen 두 개는 수직선을 긋는다.'/

class Game {
    + {abstract} init()
    + {abstract} update()
    + {abstract} render()
    + {abstract} release()
}

class Coordinate {
    - x: int
    - y: int
}

class Dimension {
    - width: int
    - height: int
    + getSize(): int
}

class Tetris {
    - tetromino: TetrisComponent
    - tetrion: TetrisComponent
}

class TetrisComponent {
    # position: Coordinate
    # boundingBox: Dimension
    # data: dataType *
    # {static} canvas: Buffer

    + sketch(): void
    + {abstract} update(): void
}

class Tetromino {
    - color: enum Color
    - type: enum Type

    - move(enum Direction)
    - hardDrop()
    - lock()
    - rotate()
}

class Tetrion {
    - clearLine() : void
    - fix(Tetromino) : void
}

class Buffer {
    - front: bool *
    - back: bool *

    + flip() : void
    + setData(pos: int, data: bool) : void
}

@enduml
